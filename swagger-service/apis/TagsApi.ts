// tslint:disable
/**
 * Express.js Backend API
 * 一个专为前端工程师设计的Express.js后端API模板
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiTagsGet200Response,
    ApiTagsIdDelete200Response,
    ApiTagsPost201Response,
    CreateTagData,
    UpdateTagData,
} from '../models';

export interface ApiTagsIdDeleteRequest {
    id: string;
}

export interface ApiTagsIdGetRequest {
    id: string;
}

export interface ApiTagsIdPutRequest {
    id: string;
    updateTagData: UpdateTagData;
}

export interface ApiTagsPostRequest {
    createTagData: CreateTagData;
}

/**
 * no description
 */
export class TagsApi extends BaseAPI {

    /**
     * 获取所有标签的列表
     * 获取标签列表
     */
    apiTagsGet(): Observable<ApiTagsGet200Response>
    apiTagsGet(opts?: OperationOpts): Observable<AjaxResponse<ApiTagsGet200Response>>
    apiTagsGet(opts?: OperationOpts): Observable<ApiTagsGet200Response | AjaxResponse<ApiTagsGet200Response>> {
        return this.request<ApiTagsGet200Response>({
            url: '/api/tags',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * 删除指定ID的标签
     * 删除标签
     */
    apiTagsIdDelete({ id }: ApiTagsIdDeleteRequest): Observable<ApiTagsIdDelete200Response>
    apiTagsIdDelete({ id }: ApiTagsIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTagsIdDelete200Response>>
    apiTagsIdDelete({ id }: ApiTagsIdDeleteRequest, opts?: OperationOpts): Observable<ApiTagsIdDelete200Response | AjaxResponse<ApiTagsIdDelete200Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTagsIdDelete');

        return this.request<ApiTagsIdDelete200Response>({
            url: '/api/tags/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * 根据ID获取标签详情
     * 获取单个标签
     */
    apiTagsIdGet({ id }: ApiTagsIdGetRequest): Observable<ApiTagsPost201Response>
    apiTagsIdGet({ id }: ApiTagsIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTagsPost201Response>>
    apiTagsIdGet({ id }: ApiTagsIdGetRequest, opts?: OperationOpts): Observable<ApiTagsPost201Response | AjaxResponse<ApiTagsPost201Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTagsIdGet');

        return this.request<ApiTagsPost201Response>({
            url: '/api/tags/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * 更新指定ID的标签
     * 更新标签
     */
    apiTagsIdPut({ id, updateTagData }: ApiTagsIdPutRequest): Observable<ApiTagsPost201Response>
    apiTagsIdPut({ id, updateTagData }: ApiTagsIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTagsPost201Response>>
    apiTagsIdPut({ id, updateTagData }: ApiTagsIdPutRequest, opts?: OperationOpts): Observable<ApiTagsPost201Response | AjaxResponse<ApiTagsPost201Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTagsIdPut');
        throwIfNullOrUndefined(updateTagData, 'updateTagData', 'apiTagsIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTagsPost201Response>({
            url: '/api/tags/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: updateTagData,
        }, opts?.responseOpts);
    };

    /**
     * 创建一个新的标签
     * 创建新标签
     */
    apiTagsPost({ createTagData }: ApiTagsPostRequest): Observable<ApiTagsPost201Response>
    apiTagsPost({ createTagData }: ApiTagsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTagsPost201Response>>
    apiTagsPost({ createTagData }: ApiTagsPostRequest, opts?: OperationOpts): Observable<ApiTagsPost201Response | AjaxResponse<ApiTagsPost201Response>> {
        throwIfNullOrUndefined(createTagData, 'createTagData', 'apiTagsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTagsPost201Response>({
            url: '/api/tags',
            method: 'POST',
            headers,
            body: createTagData,
        }, opts?.responseOpts);
    };

}
