// tslint:disable
/**
 * Express.js Backend API
 * 一个专为前端工程师设计的Express.js后端API模板
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiAuthDeleteAccountDelete200Response,
    ApiAuthLogoutPost200Response,
    ApiAuthProfileGet200Response,
    ApiAuthProfilePut200Response,
    AuthResponse,
    DeleteAccountRequest,
    ErrorResponse,
    LoginRequest,
    LogoutRequest,
    RefreshTokenRequest,
    RefreshTokenResponse,
    RegisterRequest,
    UpdateUserRequest,
} from '../models';

export interface ApiAuthDeleteAccountDeleteRequest {
    deleteAccountRequest: DeleteAccountRequest;
}

export interface ApiAuthLoginPostRequest {
    loginRequest: LoginRequest;
}

export interface ApiAuthLogoutPostRequest {
    logoutRequest?: LogoutRequest;
}

export interface ApiAuthProfilePutRequest {
    updateUserRequest: UpdateUserRequest;
}

export interface ApiAuthRefreshTokenPostRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

export interface ApiAuthRegisterPostRequest {
    registerRequest: RegisterRequest;
}

/**
 * no description
 */
export class AuthApi extends BaseAPI {

    /**
     * 永久删除用户账号及相关数据。此操作不可逆，主要用于e2e测试中清理测试数据。
     * 注销账号
     */
    apiAuthDeleteAccountDelete({ deleteAccountRequest }: ApiAuthDeleteAccountDeleteRequest): Observable<ApiAuthDeleteAccountDelete200Response>
    apiAuthDeleteAccountDelete({ deleteAccountRequest }: ApiAuthDeleteAccountDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiAuthDeleteAccountDelete200Response>>
    apiAuthDeleteAccountDelete({ deleteAccountRequest }: ApiAuthDeleteAccountDeleteRequest, opts?: OperationOpts): Observable<ApiAuthDeleteAccountDelete200Response | AjaxResponse<ApiAuthDeleteAccountDelete200Response>> {
        throwIfNullOrUndefined(deleteAccountRequest, 'deleteAccountRequest', 'apiAuthDeleteAccountDelete');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiAuthDeleteAccountDelete200Response>({
            url: '/api/auth/delete-account',
            method: 'DELETE',
            headers,
            body: deleteAccountRequest,
        }, opts?.responseOpts);
    };

    /**
     * 用户使用邮箱和密码登录系统
     * 用户登录
     */
    apiAuthLoginPost({ loginRequest }: ApiAuthLoginPostRequest): Observable<AuthResponse>
    apiAuthLoginPost({ loginRequest }: ApiAuthLoginPostRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthResponse>>
    apiAuthLoginPost({ loginRequest }: ApiAuthLoginPostRequest, opts?: OperationOpts): Observable<AuthResponse | AjaxResponse<AuthResponse>> {
        throwIfNullOrUndefined(loginRequest, 'loginRequest', 'apiAuthLoginPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<AuthResponse>({
            url: '/api/auth/login',
            method: 'POST',
            headers,
            body: loginRequest,
        }, opts?.responseOpts);
    };

    /**
     * 用户登出
     */
    apiAuthLogoutPost({ logoutRequest }: ApiAuthLogoutPostRequest): Observable<ApiAuthLogoutPost200Response>
    apiAuthLogoutPost({ logoutRequest }: ApiAuthLogoutPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiAuthLogoutPost200Response>>
    apiAuthLogoutPost({ logoutRequest }: ApiAuthLogoutPostRequest, opts?: OperationOpts): Observable<ApiAuthLogoutPost200Response | AjaxResponse<ApiAuthLogoutPost200Response>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiAuthLogoutPost200Response>({
            url: '/api/auth/logout',
            method: 'POST',
            headers,
            body: logoutRequest,
        }, opts?.responseOpts);
    };

    /**
     * 获取当前登录用户的个人信息（需要认证）
     * 获取用户信息
     */
    apiAuthProfileGet(): Observable<ApiAuthProfileGet200Response>
    apiAuthProfileGet(opts?: OperationOpts): Observable<AjaxResponse<ApiAuthProfileGet200Response>>
    apiAuthProfileGet(opts?: OperationOpts): Observable<ApiAuthProfileGet200Response | AjaxResponse<ApiAuthProfileGet200Response>> {
        const headers: HttpHeaders = {
        };

        return this.request<ApiAuthProfileGet200Response>({
            url: '/api/auth/profile',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * 更新用户信息
     */
    apiAuthProfilePut({ updateUserRequest }: ApiAuthProfilePutRequest): Observable<ApiAuthProfilePut200Response>
    apiAuthProfilePut({ updateUserRequest }: ApiAuthProfilePutRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiAuthProfilePut200Response>>
    apiAuthProfilePut({ updateUserRequest }: ApiAuthProfilePutRequest, opts?: OperationOpts): Observable<ApiAuthProfilePut200Response | AjaxResponse<ApiAuthProfilePut200Response>> {
        throwIfNullOrUndefined(updateUserRequest, 'updateUserRequest', 'apiAuthProfilePut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiAuthProfilePut200Response>({
            url: '/api/auth/profile',
            method: 'PUT',
            headers,
            body: updateUserRequest,
        }, opts?.responseOpts);
    };

    /**
     * 刷新访问令牌
     */
    apiAuthRefreshTokenPost({ refreshTokenRequest }: ApiAuthRefreshTokenPostRequest): Observable<RefreshTokenResponse>
    apiAuthRefreshTokenPost({ refreshTokenRequest }: ApiAuthRefreshTokenPostRequest, opts?: OperationOpts): Observable<AjaxResponse<RefreshTokenResponse>>
    apiAuthRefreshTokenPost({ refreshTokenRequest }: ApiAuthRefreshTokenPostRequest, opts?: OperationOpts): Observable<RefreshTokenResponse | AjaxResponse<RefreshTokenResponse>> {
        throwIfNullOrUndefined(refreshTokenRequest, 'refreshTokenRequest', 'apiAuthRefreshTokenPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RefreshTokenResponse>({
            url: '/api/auth/refresh-token',
            method: 'POST',
            headers,
            body: refreshTokenRequest,
        }, opts?.responseOpts);
    };

    /**
     * 创建新的用户账户。用户名可选，如果不提供将使用邮箱前缀作为默认用户名。如果用户名已存在，系统会自动添加数字后缀确保唯一性。
     * 用户注册
     */
    apiAuthRegisterPost({ registerRequest }: ApiAuthRegisterPostRequest): Observable<AuthResponse>
    apiAuthRegisterPost({ registerRequest }: ApiAuthRegisterPostRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthResponse>>
    apiAuthRegisterPost({ registerRequest }: ApiAuthRegisterPostRequest, opts?: OperationOpts): Observable<AuthResponse | AjaxResponse<AuthResponse>> {
        throwIfNullOrUndefined(registerRequest, 'registerRequest', 'apiAuthRegisterPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<AuthResponse>({
            url: '/api/auth/register',
            method: 'POST',
            headers,
            body: registerRequest,
        }, opts?.responseOpts);
    };

}
