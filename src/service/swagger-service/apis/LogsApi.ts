// tslint:disable
/**
 * Express.js Backend API
 * 一个专为前端工程师设计的Express.js后端API模板
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    ApiLogsFilenameGet200Response,
    ApiLogsGet200Response,
} from '../models';

export interface ApiLogsFilenameGetRequest {
    filename: string;
    lines?: number;
    search?: string;
}

export interface ApiLogsTailFilenameGetRequest {
    filename: string;
    lines?: number;
}

/**
 * no description
 */
export class LogsApi extends BaseAPI {

    /**
     * 获取指定日志文件的内容
     * 获取日志文件内容
     */
    apiLogsFilenameGet({ filename, lines, search }: ApiLogsFilenameGetRequest): Observable<ApiLogsFilenameGet200Response>
    apiLogsFilenameGet({ filename, lines, search }: ApiLogsFilenameGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiLogsFilenameGet200Response>>
    apiLogsFilenameGet({ filename, lines, search }: ApiLogsFilenameGetRequest, opts?: OperationOpts): Observable<ApiLogsFilenameGet200Response | AjaxResponse<ApiLogsFilenameGet200Response>> {
        throwIfNullOrUndefined(filename, 'filename', 'apiLogsFilenameGet');

        const query: HttpQuery = {};

        if (lines != null) { query['lines'] = lines; }
        if (search != null) { query['search'] = search; }

        return this.request<ApiLogsFilenameGet200Response>({
            url: '/api/logs/{filename}'.replace('{filename}', encodeURI(filename)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * 获取所有可用的日志文件列表
     * 获取日志文件列表
     */
    apiLogsGet(): Observable<ApiLogsGet200Response>
    apiLogsGet(opts?: OperationOpts): Observable<AjaxResponse<ApiLogsGet200Response>>
    apiLogsGet(opts?: OperationOpts): Observable<ApiLogsGet200Response | AjaxResponse<ApiLogsGet200Response>> {
        return this.request<ApiLogsGet200Response>({
            url: '/api/logs',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * 获取日志文件的最新内容（类似tail -f命令）
     * 实时获取日志文件尾部内容
     */
    apiLogsTailFilenameGet({ filename, lines }: ApiLogsTailFilenameGetRequest): Observable<void>
    apiLogsTailFilenameGet({ filename, lines }: ApiLogsTailFilenameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiLogsTailFilenameGet({ filename, lines }: ApiLogsTailFilenameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(filename, 'filename', 'apiLogsTailFilenameGet');

        const query: HttpQuery = {};

        if (lines != null) { query['lines'] = lines; }

        return this.request<void>({
            url: '/api/logs/tail/{filename}'.replace('{filename}', encodeURI(filename)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
