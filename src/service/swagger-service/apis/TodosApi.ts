// tslint:disable
/**
 * Express.js Backend API
 * 一个专为前端工程师设计的Express.js后端API模板
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiTodosBatchPost200Response,
    ApiTodosGet200Response,
    ApiTodosIdDelete200Response,
    ApiTodosPost201Response,
    ApiTodosReorderPost200Response,
    BatchOperation,
    CreateTodoData,
    ReorderRequest,
    UpdateTodoData,
} from '../models';

export interface ApiTodosBatchPostRequest {
    batchOperation: BatchOperation;
}

export interface ApiTodosGetRequest {
    page?: number;
    size?: number;
    status?: Array<ApiTodosGetStatusEnum>;
    priority?: Array<ApiTodosGetPriorityEnum>;
    tags?: Array<string>;
    keyword?: string;
    sortField?: ApiTodosGetSortFieldEnum;
    sortOrder?: ApiTodosGetSortOrderEnum;
}

export interface ApiTodosIdDeleteRequest {
    id: string;
}

export interface ApiTodosIdGetRequest {
    id: string;
}

export interface ApiTodosIdPutRequest {
    id: string;
    updateTodoData: UpdateTodoData;
}

export interface ApiTodosPostRequest {
    createTodoData: CreateTodoData;
}

export interface ApiTodosReorderPostRequest {
    reorderRequest: ReorderRequest;
}

/**
 * no description
 */
export class TodosApi extends BaseAPI {

    /**
     * 对多个任务执行批量操作（删除或更新）
     * 批量操作任务
     */
    apiTodosBatchPost({ batchOperation }: ApiTodosBatchPostRequest): Observable<ApiTodosBatchPost200Response>
    apiTodosBatchPost({ batchOperation }: ApiTodosBatchPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosBatchPost200Response>>
    apiTodosBatchPost({ batchOperation }: ApiTodosBatchPostRequest, opts?: OperationOpts): Observable<ApiTodosBatchPost200Response | AjaxResponse<ApiTodosBatchPost200Response>> {
        throwIfNullOrUndefined(batchOperation, 'batchOperation', 'apiTodosBatchPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTodosBatchPost200Response>({
            url: '/api/todos/batch',
            method: 'POST',
            headers,
            body: batchOperation,
        }, opts?.responseOpts);
    };

    /**
     * 获取任务列表，支持筛选、排序和分页
     * 获取任务列表
     */
    apiTodosGet({ page, size, status, priority, tags, keyword, sortField, sortOrder }: ApiTodosGetRequest): Observable<ApiTodosGet200Response>
    apiTodosGet({ page, size, status, priority, tags, keyword, sortField, sortOrder }: ApiTodosGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosGet200Response>>
    apiTodosGet({ page, size, status, priority, tags, keyword, sortField, sortOrder }: ApiTodosGetRequest, opts?: OperationOpts): Observable<ApiTodosGet200Response | AjaxResponse<ApiTodosGet200Response>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }
        if (status != null) { query['status'] = status; }
        if (priority != null) { query['priority'] = priority; }
        if (tags != null) { query['tags'] = tags; }
        if (keyword != null) { query['keyword'] = keyword; }
        if (sortField != null) { query['sortField'] = sortField; }
        if (sortOrder != null) { query['sortOrder'] = sortOrder; }

        return this.request<ApiTodosGet200Response>({
            url: '/api/todos',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * 删除指定ID的任务
     * 删除任务
     */
    apiTodosIdDelete({ id }: ApiTodosIdDeleteRequest): Observable<ApiTodosIdDelete200Response>
    apiTodosIdDelete({ id }: ApiTodosIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosIdDelete200Response>>
    apiTodosIdDelete({ id }: ApiTodosIdDeleteRequest, opts?: OperationOpts): Observable<ApiTodosIdDelete200Response | AjaxResponse<ApiTodosIdDelete200Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTodosIdDelete');

        return this.request<ApiTodosIdDelete200Response>({
            url: '/api/todos/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * 根据ID获取任务详情
     * 获取单个任务
     */
    apiTodosIdGet({ id }: ApiTodosIdGetRequest): Observable<ApiTodosPost201Response>
    apiTodosIdGet({ id }: ApiTodosIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosPost201Response>>
    apiTodosIdGet({ id }: ApiTodosIdGetRequest, opts?: OperationOpts): Observable<ApiTodosPost201Response | AjaxResponse<ApiTodosPost201Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTodosIdGet');

        return this.request<ApiTodosPost201Response>({
            url: '/api/todos/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * 更新指定ID的任务
     * 更新任务
     */
    apiTodosIdPut({ id, updateTodoData }: ApiTodosIdPutRequest): Observable<ApiTodosPost201Response>
    apiTodosIdPut({ id, updateTodoData }: ApiTodosIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosPost201Response>>
    apiTodosIdPut({ id, updateTodoData }: ApiTodosIdPutRequest, opts?: OperationOpts): Observable<ApiTodosPost201Response | AjaxResponse<ApiTodosPost201Response>> {
        throwIfNullOrUndefined(id, 'id', 'apiTodosIdPut');
        throwIfNullOrUndefined(updateTodoData, 'updateTodoData', 'apiTodosIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTodosPost201Response>({
            url: '/api/todos/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: updateTodoData,
        }, opts?.responseOpts);
    };

    /**
     * 创建一个新的任务
     * 创建新任务
     */
    apiTodosPost({ createTodoData }: ApiTodosPostRequest): Observable<ApiTodosPost201Response>
    apiTodosPost({ createTodoData }: ApiTodosPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosPost201Response>>
    apiTodosPost({ createTodoData }: ApiTodosPostRequest, opts?: OperationOpts): Observable<ApiTodosPost201Response | AjaxResponse<ApiTodosPost201Response>> {
        throwIfNullOrUndefined(createTodoData, 'createTodoData', 'apiTodosPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTodosPost201Response>({
            url: '/api/todos',
            method: 'POST',
            headers,
            body: createTodoData,
        }, opts?.responseOpts);
    };

    /**
     * 批量更新任务的排序顺序
     * 重新排序任务
     */
    apiTodosReorderPost({ reorderRequest }: ApiTodosReorderPostRequest): Observable<ApiTodosReorderPost200Response>
    apiTodosReorderPost({ reorderRequest }: ApiTodosReorderPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ApiTodosReorderPost200Response>>
    apiTodosReorderPost({ reorderRequest }: ApiTodosReorderPostRequest, opts?: OperationOpts): Observable<ApiTodosReorderPost200Response | AjaxResponse<ApiTodosReorderPost200Response>> {
        throwIfNullOrUndefined(reorderRequest, 'reorderRequest', 'apiTodosReorderPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ApiTodosReorderPost200Response>({
            url: '/api/todos/reorder',
            method: 'POST',
            headers,
            body: reorderRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum ApiTodosGetStatusEnum {
    pending = 'pending',
    in_progress = 'in-progress',
    completed = 'completed'
}
/**
 * @export
 * @enum {string}
 */
export enum ApiTodosGetPriorityEnum {
    high = 'high',
    medium = 'medium',
    low = 'low'
}
/**
 * @export
 * @enum {string}
 */
export enum ApiTodosGetSortFieldEnum {
    priority = 'priority',
    createdAt = 'createdAt',
    updatedAt = 'updatedAt',
    completedAt = 'completedAt',
    dueDate = 'dueDate',
    order = 'order'
}
/**
 * @export
 * @enum {string}
 */
export enum ApiTodosGetSortOrderEnum {
    asc = 'asc',
    desc = 'desc'
}
